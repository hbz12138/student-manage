#include<stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <math.h>
#include <string>
#include<windows.h>
#include <iostream>
#include <time.h>
using namespace std;

/*主菜单的控制函数*/
void student_intialize();
void ShowMenu();
/*学生信息表*/
void table_student();
void StudentSet();
void StudentAdd();
void StudentSearch();
void StudentChange();
void StudentDelete();
void studentsort();
/*成绩信息表*/
void table_score();
void ScoreSet();
void StudentScoreSearch();
void ScoreChange();
void StudentScoreDelete();
/*课程信息表*/
void table_course();
void courseChange();
void courseAdd();
void courseDelete();
void courseSet();
struct message{
	//包含学生信息结构体
	string name;
	string sex;
	int age;
	string part;
	int score;
	int id;
}student[1000],temp;


struct course{
	//课程结构体
	int id;
	string name;
	int credit;
}course_all[1000];
struct course_score{
	//课程成绩结构体
	int id;
	int course_id;
	int score;
}score_all[10000];

//信息管理模块页面
int main()
{
	ShowMenu();		//进入展示主界面，进行用户引导操作
	return 0;
}
void ShowMenu()//主菜单
{

	cout<<(" ---------------学生成绩管理系统主菜单-----------------\n")
	<<("| 1--学生信息		|\n")
	<<("| 2--成绩信息		|\n")
	<<("| 3--课程信息       |\n")
	<<("| 0--退出系统       |\n")
	<<("| 请输入选项代码:(从0~3进行选择)                       |\n")
	<<(" ------------------------------------------------------\n");
	int n;
	cin>>n;
	cout<<"\n----您输入的选项代码为:"<<n;
		switch(n){
			case 1:
				printf("\n----请您对学生基本信息进行录入、修改、查询、删除、浏览\n");
				table_student();
				break;
			case 2:
				printf("\n\n----请您对学生成绩信息进行录入、修改、查询、删除、浏览\n");
				table_score();
				break;
			case 3:
				printf("\n----请您对课程信息进行录入、修改、查询、删除、浏览\n");
				table_course();
				break;
			case 0:
				printf("----已退出学生成绩管理系统\n");
				break;}
}

void table_student(){
	static int p;
	cout<<"\n---------学生基本信息模块---------\n"//界面提示信息
	<<"|1--录入学生信息                   |\n"
	<<"|2--查询录入学生信息               |\n"
	<<"|3--查询初始化学生信息             |\n"
	<<"|4--修改指定学生信息               |\n"
	<<"|5--删除指定学生信息               |\n"
	<<"|0--返回主菜单                     |\n"
	<<"|请输入选项代码:                   |\n"
	<<" ---------------------------------- \n";
	cin>>p;	//键盘输入选项参数用于涉及到的选项操作
	switch(p){
		case 1:
			printf("----请录入学生信息\n");
			DWORD t1,t2;
			t1=GetTickCount();
			StudentSet();//引入学生信息的录入函数
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----按回车键返回学生信息管理\n");
			getchar();//键盘获取一个字符
			table_student();//重新返回到模块一的界面
			break;//结束单次的选项
		case 2:
			printf("----请查询学生信息\n");
			t1=GetTickCount();
			StudentAdd();//添加学生信息函数
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----按回车键返回学生信息管理\n");
			getchar();//键盘获取一个字符
			table_student();//返回到上一个页面  注：后面多次使用不再重复注释
			break;
		case 3:
			printf("----为您查询指定学生信息\n");

			t1=GetTickCount();
			StudentSearch();//引入查询指定学生信息的函数
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----按回车键返回学生信息管理\n");
			getchar();
			table_student();
			break;
		case 4:
			printf("----修改指定学生信息\n");
			t1=GetTickCount();
			StudentChange();//引入修改学生信息的函数
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----按回车键返回学生信息管理\n");
			getchar();
			table_student();
			break;
		case 5:
			printf("----删除指定学生信息\n");
			t1=GetTickCount();
			StudentDelete();//引入删除学生信息的函数
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("删除成功！");
			printf("----按回车键返回学生信息管理\n");
			getchar();
			table_student();
			break;
		case 0:
			printf("----退出,并返回主菜单\n");
			ShowMenu();
			break;

	}
}
/*学生信息的增删改查功能*/
void StudentSet()
{
	int st1;
	printf("----请录入你想编辑学生信息的个数为：\n");//提示录入学生个数信息
	cin>>st1;//键盘获取学生个数的参数
	for(int i=0;i<st1;i++)//for循环对学生们逐一进行赋值
	{
		printf("请输入第%d个学生信息\n",i+1);
		printf("----请输入学号：\n");	cin>>student[i].id;//给学生id赋值
		printf("----请输入姓名：\n");	cin>>student[i].name;
		printf("----请输入性别：\n");	cin>>student[i].sex;
		printf("----请输入年龄：\n");	cin>>student[i].age;
		printf("----请输入院系：\n");	cin>>student[i].part;
		fflush(stdin);//清除键盘缓存区的内容
		putchar('\n');
	}
}
void StudentAdd()
{
	long id1;//定义一个用于键盘输入学生学号
	int j;//定义一个整型变量用于统计学生人数
	printf("----输入你想查询的查询指定学生学号\n");
	cin>>id1;//键盘输入学生
	for(j=0;student[j].id!=0;j++)//对已有的学生进行统计
		;
	for(int i=0;i<j;i++){
		if(student[i].id==id1){
			printf("\n学号\t姓名\t性别\t年龄\t院系\n");//输出学号姓名
			cout<<student[i].id<<"\t"<<student[i].name<<"\t"<<student[i].sex<<"\t"<<student[i].age<<"\t"<<student[i].part<<"\n";
			break;
		}
		else
			continue;
	}
}
void StudentSearch()
{
	 //百家姓-单姓
	 string NA1[444] = { "赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "褚", "卫", "蒋", "沈", "韩", "杨", "朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏", "陶", "姜", "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭", "郎", "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳", "酆", "鲍", "史", "唐", "费", "廉", "岑", "薛", "雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常", "乐", "于", "时", "傅", "皮", "卞", "齐", "康", "伍", "余", "元", "卜", "顾", "孟", "平", "黄", "和", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄", "米", "贝", "明", "臧", "计", "伏", "成", "戴", "谈", "宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "梁", "杜", "阮", "蓝", "闵", "席", "季", "麻", "强", "贾", "路", "娄", "危", "江", "童", "颜", "郭", "梅", "盛", "林", "刁", "钟", "徐", "邱", "骆", "高", "夏", "蔡", "田", "樊", "胡", "凌", "霍", "虞", "万", "支", "柯", "昝", "管", "卢", "莫", "经", "房", "裘", "缪", "干", "解", "应", "宗", "丁", "宣", "贲", "邓", "郁", "单", "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "钮", "龚", "程", "嵇", "邢", "滑", "裴", "陆", "荣", "翁", "荀", "羊", "於", "惠", "甄", "麴", "家", "封", "芮", "羿", "储", "靳", "汲", "邴", "糜", "松", "井", "段", "富", "巫", "乌", "焦", "巴", "弓", "牧", "隗", "山", "谷", "车", "侯", "宓", "蓬", "全", "郗", "班", "仰", "秋", "仲", "伊", "宫", "宁", "仇", "栾", "暴", "甘", "钭", "厉", "戎", "祖", "武", "符", "刘", "景", "詹", "束", "龙", "叶", "幸", "司", "韶", "郜", "黎", "蓟", "薄", "印", "宿", "白", "怀", "蒲", "邰", "从", "鄂", "索", "咸", "籍", "赖", "卓", "蔺", "屠", "蒙","池", "乔", "阴", "郁", "胥", "能", "苍", "双", "闻", "莘", "党", "翟", "谭", "贡", "劳", "逄", "姬", "申", "扶", "堵", "冉", "宰", "郦", "雍", "舄", "璩", "桑", "桂", "濮", "牛", "寿", "通", "边", "扈", "燕", "冀", "郏", "浦", "尚", "农", "温", "别", "庄", "晏", "柴", "瞿", "阎", "充", "慕", "连", "茹", "习", "宦", "艾", "鱼", "容", "向", "古", "易", "慎", "戈", "廖", "庾", "终", "暨", "居", "衡", "步", "都", "耿", "满", "弘", "匡", "国", "文", "寇", "广", "禄", "阙", "东", "殴", "殳", "沃", "利", "蔚", "越", "夔", "隆", "师", "巩", "厍", "聂", "晁", "勾", "敖", "融", "冷", "訾", "辛", "阚", "那", "简", "饶", "空", "曾", "毋", "沙", "乜", "养", "鞠", "须", "丰", "巢", "关", "蒯", "相", "查", "後", "荆", "红", "游", "竺", "权", "逯", "盖", "益", "桓", "公", "仉", "督", "晋", "楚", "闫", "法", "汝", "鄢", "涂", "钦", "归", "海","岳", "帅", "缑", "亢", "况", "后", "有", "琴", "商", "牟", "佘", "佴", "伯", "赏", "墨", "哈", "谯", "笪", "年", "爱", "阳", "佟", "言", "福" };
	 //百家姓-复姓
	 string NA2[59] = { "万俟", "司马", "上官", "欧阳", "夏侯", "诸葛", "闻人", "东方", "赫连", "皇甫", "尉迟", "公羊", "澹台", "公冶", "宗政", "濮阳", "淳于", "单于", "太叔", "申屠", "公孙", "仲孙", "轩辕", "令狐", "钟离", "宇文", "长孙", "慕容", "鲜于", "闾丘", "司徒", "司空", "亓官", "司寇", "子车", "颛孙", "端木", "巫马", "公西", "漆雕", "乐正", "壤驷", "公良", "拓跋", "夹谷", "宰父", "谷梁", "百里", "东郭", "南门", "呼延", "羊舌", "微生", "梁丘", "左丘", "东门", "西门", "南宫", "第五" };
	 //男性常用名
	 string ME1m[140] = { "伟", "刚", "勇", "毅", "俊", "峰", "强", "军", "平", "保", "东", "文", "辉", "力", "明", "永", "健", "世", "广", "志", "义", "兴", "良", "海", "山", "仁", "波", "宁", "贵", "福", "生", "龙", "元", "全", "国", "胜", "学", "祥", "才", "发", "武", "新", "利", "清", "飞", "彬", "富", "顺", "信", "子", "杰", "涛", "昌", "成", "康", "星", "光", "天", "达", "安", "岩", "中", "茂", "进", "林", "有", "坚", "和", "彪", "博", "诚", "先", "敬", "震", "振", "壮", "会", "思", "群", "豪", "心", "邦", "承", "乐", "绍", "功", "松", "善", "厚", "庆", "磊", "民", "友", "裕", "河", "哲", "江", "超", "浩", "亮", "政", "谦", "亨", "奇", "固", "之", "轮", "翰", "朗", "伯", "宏", "言", "若", "鸣", "朋", "斌", "梁", "栋", "维", "启", "克", "伦", "翔", "旭", "鹏", "泽", "晨", "辰", "士", "以", "建", "家", "致", "树", "炎", "德", "行", "时", "泰", "盛" };
	 //女性常用名
	 string ME1f[165] = { "秀", "娟", "英", "华", "慧", "巧", "美", "娜", "静", "淑", "惠", "珠", "翠", "雅", "芝", "玉", "萍", "红", "娥", "玲", "芬", "芳", "燕", "彩", "春", "菊", "兰", "凤", "洁", "梅", "琳", "素", "云", "莲", "真", "环", "雪", "荣", "爱", "妹", "霞", "香", "月", "莺", "媛", "艳", "瑞", "凡", "佳", "嘉", "琼", "勤", "珍", "贞", "莉", "桂", "娣", "叶", "璧", "璐", "娅", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "姣", "婉", "娴", "瑾", "颖", "露", "瑶", "怡", "婵", "雁", "蓓", "纨", "仪", "荷", "丹", "蓉", "眉", "君", "琴", "蕊", "薇", "菁", "梦", "岚", "苑", "筠", "柔", "竹", "霭", "凝", "晓", "欢", "霄", "枫", "芸", "菲", "寒", "欣", "滢", "伊", "亚", "宜", "可", "姬", "舒", "影", "荔", "枝", "思", "丽", "秀", "飘", "育", "馥", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "宁","蓓", "纨", "苑", "婕", "馨", "瑗", "琰", "韵", "融", "园", "艺", "咏", "卿", "聪", "澜", "纯", "毓", "悦", "昭", "冰", "爽", "琬", "茗", "羽", "希" };
	 //院系
	 string Major[10] = {"软件工程","动画设计","网络工程","电子通讯","网络安全","电气工程","机电一体化","物联网工程","数字媒体","电信工程"};
	 for(int i=0;i<1001;i++){
		 student[i].id=i;
	 student[i].sex = (rand()%2 == 0?"男":"女");//男女选择
	 student[i].name = (rand()%56 != 5?NA1[rand()%444]:NA2[rand()%59]);//单姓Or复姓选择
	 student[i].name += (student[i].sex == "男" ? ME1m[rand()%140] : ME1f[rand()%165]);//取名第一字
	 if(rand()%2 == 0) student[i].name += (student[i].sex == "男" ? ME1m[rand()%140] : ME1f[rand()%165]);//取名第二字
	 student[i].age=rand()%4+18;
	 student[i].part = Major[rand()%10];//选择院系
	 }
	long id1;//定义一个用于键盘输入学生学号
	int j;//定义一个整型变量用于统计学生人数
	printf("\n----输入你想查询的查询指定学生学号\n");
	cin>>j;//键盘输入学号
	fflush(stdin);
			printf("\n学号\t姓名\t性别\t年龄\t院系\n");//输出学号姓名
			cout<<student[j].id<<"\t"<<student[j].name<<"\t"<<student[j].sex<<"\t"<<student[j].age<<"\t"<<student[j].part<<"\n";

}
void StudentChange(){
	long idst1;//用于键盘输入学号以便为其更改
	int i=0;
	printf("\n----输入需要更改信息的学生学号\n");
	cin>>idst1;//键盘输入需要改写的学号
			printf("----请输入更改的学号：\n");cin>>student[i].id;//更改学员学号
			printf("----请输入更改的姓名：\n");
			fflush(stdin);//清除键盘缓存区内容
			cin>>student[i].name;//给名字赋值
			printf("----请输入更改的性别：\n");	cin>>student[i].sex;
			printf("----请输入更改的年龄：\n");	cin>>student[i].age;
			printf("----请输入更改的院系：\n");	cin>>student[i].part;
}
void StudentDelete()
{
	int j;//
	long idst2;//定义用于删减的学生学号
	printf("----输入需要删除信息的学生学号\n");
	cin>>idst2;//输入你要删减的学生学号
	fflush(stdin);//清楚键盘的缓冲区的内容
	for(j=0;student[j].id!=0;j++)//统计计算学生人数
		;
	for(int i=0;i<i+j;i++)//运用for循环将需要删除的学生信息与后面的所有学生信息逐一向前挪动一位
	{
		if(student[i].id==idst2){
			for(int k=i;k<j;k++){
				student[k].id=student[k+1].id;
				student[k].name=student[k+1].name;
				student[k].sex=student[k+1].sex;
				student[k].age=student[k+1].age;
				student[k].part=student[k+1].part;
			}
			break;
		}
		else
			continue;
	}
}
void studentsort(){
	cout<<"进入学生排序功能！";
	int i,j,t;
	for(j=0;student[j].id!=0;j++);
	for(i=0;i<j;i++){
		for(t=0;t<j-i+1;t++){
			if(student[t].id<student[i+1].id){
				temp.id=student[t].id;
				student[t].id=student[t+1].id;
				student[t+1].id=temp.id;
				temp.age=student[t].age;
				student[t].age=student[t+1].age;
				student[t+1].age=temp.age;
				temp.name=student[t].name;
				student[t].name=student[t+1].name;
				student[t+1].name=temp.name;
				temp.sex=student[t].sex;
				student[t].sex=student[t+1].sex;
				student[t+1].sex=temp.sex;
				temp.part=student[t].part;
				student[t].part=student[t+1].part;
				student[t+1].part=temp.part;
			}
		}
	}
	cout<<"\n排序完成！\n";
}

//学生课程成绩增删改查
void table_score(){
	int c;
	DWORD t1,t2;
	printf(" ---------学生成绩信息管理模块---------\n");
	printf("|1--录入学生成绩                       |\n");
	printf("|2--查询指定学生成绩                   |\n");
	printf("|3--修改指定学生成绩                   |\n");
	printf("|4--删除指定学生成绩                   |\n");
	printf("|0--返回主菜单                         |\n");
	printf(" --------------------------------------\n");
	printf("----请输入选项代码:\n");
	cin>>c;
	fflush(stdin);
	switch(c){
		case 1:
			printf("----录入学生成绩\n");
			t1=GetTickCount();
			ScoreSet();//1--进行成绩的录入包括计算总分
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----按回车键返回成绩信息管理\n");
			getchar();
			table_score();
			break;
		case 2:
			printf("----查询指定学生成绩\n");
			t1=GetTickCount();
			StudentScoreSearch();//引入查询指定学生成绩函数
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----按回车键返回成绩信息管理\n");
			getchar();
			table_score();
			break;
		case 3:
			printf("----修改指定学生成绩\n");
			t1=GetTickCount();
			ScoreChange();//引入修改指定学生成绩的函数
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----按回车键返回成绩信息管理\n");
			getchar();
			table_score();
			break;
		case 4:
			printf("----删除指定学生成绩\n");
			t1=GetTickCount();
			StudentScoreDelete();//引入删除指定学生成绩
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----按回车键返回成绩信息管理\n");
			getchar();
			table_score();
			break;
		case 0:
			printf("----退出,并返回主菜单\n");
			ShowMenu();
			break;
	}
}
void ScoreSet(){
	int i;
	cout<<"\n*进入成绩录入*\n"
		<<"请输入你想录入的学生学号：";
	cin>>i;
	i=score_all[i-1].id;
	cout<<"\n请输入课程成绩：";
	cin>>score_all[i-1].score;

}
void StudentScoreSearch(){
	 for(int i=0;i<1001;i++){
		student[i].id=i;
		score_all[i].course_id=rand()%30;
		score_all[i].score=rand()%40+60;
	 }
	int j,t;

	printf("\n----输入你想成绩查询的学号\n");
	cin>>j;//键盘输入学号
	cout<<"\n----输入你想成绩查询的课程号\n";
	cin>>t;
	fflush(stdin);
	printf("学号\t课程号\t成绩\t\n");
	cout<<student[j].id<<"\t"<<t<<"\t"<<score_all[j-1].score;
}
void ScoreChange(){
	int i;
	printf("----输入需要更改成绩信息的学生学号\n");
	cin>>i;//输入需要更改成绩信息的学生学号
	student[i-1].id=i;
	fflush(stdin);//清楚键盘的缓冲区的内容
	printf("----输入学号为%d成绩：\n",student[i-1].id);
	cin>>student[i-1].score;
}
void StudentScoreDelete(){
int i,j;
	long idst2;
	printf("----输入需要删除信息的学生学号\n");
	cin>>idst2;//键盘输入删除学生信息的学号
	fflush(stdin);//清除键盘缓存
	for(j=0;student[j].id!=0;j++)//统计学生的个数
		;
	for( i=0;i<i+j;i++)//查询判断学生学号是否为所选中的学号
	{
		if(student[i].id==idst2){
			for(int k=i;k<j;k++){//将需要删除的学生信息与后面的所有学生信息逐一向前挪动一位
				student[k]=student[k+1];
			}
			break;
		}
		else
			continue;
	}
}


/*课程信息的增删改查功能*/
void table_course(){
	int c;
	DWORD t1,t2;
	printf("\n ---------课程信息管理模块---------\n");
	printf("|1--录入课程信息                  |\n");
	printf("|2--修改课程信息                  |\n");
	printf("|3--增加课程信息                  |\n");
	printf("|4--删除课程信息                  |\n");
	printf("|0--返回主菜单                    |\n");
	printf(" ---------------------------------\n");
	printf("\n----请输入选项代码:\n");
	cin>>c;
	switch(c){
		case 1:
			printf("----录入课程信息\n");
			t1=GetTickCount();
			courseSet();
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----按回车键返回课程信息管理\n");
			getchar();
			table_course();
			break;
		case 2:
			printf("----修改课程信息\n");
			t1=GetTickCount();
			courseChange();
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----按回车键返回课程信息管理\n");
			getchar();
			table_course();
			break;
		case 3:
			printf("----增加课程信息\n");
			t1=GetTickCount();
			courseAdd();
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----按回车键返回课程信息管理\n");
			getchar();
			table_course();
			break;
		case 4:
			printf("----删除课程信息\n");
			t1=GetTickCount();
			courseDelete();
			t2=GetTickCount();
			cout<<"\n运行时间："<<t2-t1<<"毫秒";
			fflush(stdin);//清除键盘缓存区的内容使程序继续运行
			printf("----删除成功\n");
			printf("----按回车键返回课程信息管理\n");
			getchar();
			table_course();
			break;
		case 0:
			printf("----退出,并返回主菜单\n");
			ShowMenu();
			break;
	}
}
void courseChange(){
	long id_course;//用于键盘输入学号以便为其更改
	int j;
	printf("----输入需要更改信息的课程号\n");
	cin>>id_course;
	for(j=0;course_all[j].id!=0;j++)
		;
	for(int i=0;i<j;i++){
		if(course_all[i].id==id_course){
			printf("----请输入更改的课程号：\n");
			cin>>course_all[i].id;
			printf("----请输入更改的课程名：\n");
			fflush(stdin);//清除键盘缓存区内容
			cin>>course_all[i].name;//给名字赋值
			printf("----请输入更改的课程学分：\n");
			cin>>course_all[i].credit;
			break;
		}
		else
			continue;
	}
}
void courseAdd(){
		int j,num;
	for(j=0;course_all[j].id!=0;j++)//一次循环操作得到已有的学生人数
		;
	printf("----你想补充的课程信息个数：\n");//题是想要再补充的学生人数
	cin>>num;//输入想要补充的学生人数
	for(int i=j;i<j+num;i++)//for循环控制，从第j+1个没有赋值过的学生开始
	{
		printf("请输入第%d课程信息\n",i);
		printf("----请输入课程号：\n");//提示信息
		cin>>course_all[i].id;//给id赋值
		printf("----请输入课程名：\n");//给课程名赋值
		fflush(stdin);//清除键盘缓存区的内容使程序继续运行
		cin>>course_all[i].name;//给课程名赋值
		printf("----请输入课程学分：\n");//提示信息
		cin>>course_all[i].credit;
	}
}
void courseDelete(){
	int j;//
	long id_course;//定义用于删减的学生学号
	printf("----输入需要删除的课程号\n");
	cin>>id_course;//输入你要删减的学生学号
	fflush(stdin);//清楚键盘的缓冲区的内容
	for(j=0;course_all[j].id!=0;j++)//统计计算学生人数
		;
	for(int i=0;i<i+j;i++)//运用for循环将需要删除的学生信息与后面的所有学生信息逐一向前挪动一位
	{
		if(course_all[i].id==id_course){
			for(int k=i;k<j;k++){
				course_all[k].id=course_all[k+1].id;
				course_all[k].name=course_all[k+1].name;
			}
			break;
		}
		else
			continue;
	}
}
void courseSet()
{
		int num;
	printf("----你想录入的课程信息个数：\n");
	cin>>num;//输入课程数
	for(int i=0;i<num;i++)//for循环控制，从第j+1个没有赋值过的学生开始
	{
		printf("请输入第%d 课程信息\n",i+1);
		printf("----请输入课程号：\n");//提示信息
		cin>>course_all[i].id;//给id赋值
		printf("----请输入课程名：\n");//给课程名赋值
		fflush(stdin);//清除键盘缓存区的内容使程序继续运行
		cin>>course_all[i].name;//给课程名赋值
		printf("----请输入课程学分：\n");//提示信息
		cin>>course_all[i].credit;
	}
}


void student_intialize(){
	 //百家姓-单姓
	 string NA1[444] = { "赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "褚", "卫", "蒋", "沈", "韩", "杨", "朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏", "陶", "姜", "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭", "郎", "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳", "酆", "鲍", "史", "唐", "费", "廉", "岑", "薛", "雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常", "乐", "于", "时", "傅", "皮", "卞", "齐", "康", "伍", "余", "元", "卜", "顾", "孟", "平", "黄", "和", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄", "米", "贝", "明", "臧", "计", "伏", "成", "戴", "谈", "宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "梁", "杜", "阮", "蓝", "闵", "席", "季", "麻", "强", "贾", "路", "娄", "危", "江", "童", "颜", "郭", "梅", "盛", "林", "刁", "钟", "徐", "邱", "骆", "高", "夏", "蔡", "田", "樊", "胡", "凌", "霍", "虞", "万", "支", "柯", "昝", "管", "卢", "莫", "经", "房", "裘", "缪", "干", "解", "应", "宗", "丁", "宣", "贲", "邓", "郁", "单", "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "钮", "龚", "程", "嵇", "邢", "滑", "裴", "陆", "荣", "翁", "荀", "羊", "於", "惠", "甄", "麴", "家", "封", "芮", "羿", "储", "靳", "汲", "邴", "糜", "松", "井", "段", "富", "巫", "乌", "焦", "巴", "弓", "牧", "隗", "山", "谷", "车", "侯", "宓", "蓬", "全", "郗", "班", "仰", "秋", "仲", "伊", "宫", "宁", "仇", "栾", "暴", "甘", "钭", "厉", "戎", "祖", "武", "符", "刘", "景", "詹", "束", "龙", "叶", "幸", "司", "韶", "郜", "黎", "蓟", "薄", "印", "宿", "白", "怀", "蒲", "邰", "从", "鄂", "索", "咸", "籍", "赖", "卓", "蔺", "屠", "蒙","池", "乔", "阴", "郁", "胥", "能", "苍", "双", "闻", "莘", "党", "翟", "谭", "贡", "劳", "逄", "姬", "申", "扶", "堵", "冉", "宰", "郦", "雍", "舄", "璩", "桑", "桂", "濮", "牛", "寿", "通", "边", "扈", "燕", "冀", "郏", "浦", "尚", "农", "温", "别", "庄", "晏", "柴", "瞿", "阎", "充", "慕", "连", "茹", "习", "宦", "艾", "鱼", "容", "向", "古", "易", "慎", "戈", "廖", "庾", "终", "暨", "居", "衡", "步", "都", "耿", "满", "弘", "匡", "国", "文", "寇", "广", "禄", "阙", "东", "殴", "殳", "沃", "利", "蔚", "越", "夔", "隆", "师", "巩", "厍", "聂", "晁", "勾", "敖", "融", "冷", "訾", "辛", "阚", "那", "简", "饶", "空", "曾", "毋", "沙", "乜", "养", "鞠", "须", "丰", "巢", "关", "蒯", "相", "查", "後", "荆", "红", "游", "竺", "权", "逯", "盖", "益", "桓", "公", "仉", "督", "晋", "楚", "闫", "法", "汝", "鄢", "涂", "钦", "归", "海","岳", "帅", "缑", "亢", "况", "后", "有", "琴", "商", "牟", "佘", "佴", "伯", "赏", "墨", "哈", "谯", "笪", "年", "爱", "阳", "佟", "言", "福" };
	 //百家姓-复姓
	 string NA2[59] = { "万俟", "司马", "上官", "欧阳", "夏侯", "诸葛", "闻人", "东方", "赫连", "皇甫", "尉迟", "公羊", "澹台", "公冶", "宗政", "濮阳", "淳于", "单于", "太叔", "申屠", "公孙", "仲孙", "轩辕", "令狐", "钟离", "宇文", "长孙", "慕容", "鲜于", "闾丘", "司徒", "司空", "亓官", "司寇", "子车", "颛孙", "端木", "巫马", "公西", "漆雕", "乐正", "壤驷", "公良", "拓跋", "夹谷", "宰父", "谷梁", "百里", "东郭", "南门", "呼延", "羊舌", "微生", "梁丘", "左丘", "东门", "西门", "南宫", "第五" };
	 //男性常用名
	 string ME1m[140] = { "伟", "刚", "勇", "毅", "俊", "峰", "强", "军", "平", "保", "东", "文", "辉", "力", "明", "永", "健", "世", "广", "志", "义", "兴", "良", "海", "山", "仁", "波", "宁", "贵", "福", "生", "龙", "元", "全", "国", "胜", "学", "祥", "才", "发", "武", "新", "利", "清", "飞", "彬", "富", "顺", "信", "子", "杰", "涛", "昌", "成", "康", "星", "光", "天", "达", "安", "岩", "中", "茂", "进", "林", "有", "坚", "和", "彪", "博", "诚", "先", "敬", "震", "振", "壮", "会", "思", "群", "豪", "心", "邦", "承", "乐", "绍", "功", "松", "善", "厚", "庆", "磊", "民", "友", "裕", "河", "哲", "江", "超", "浩", "亮", "政", "谦", "亨", "奇", "固", "之", "轮", "翰", "朗", "伯", "宏", "言", "若", "鸣", "朋", "斌", "梁", "栋", "维", "启", "克", "伦", "翔", "旭", "鹏", "泽", "晨", "辰", "士", "以", "建", "家", "致", "树", "炎", "德", "行", "时", "泰", "盛" };
	 //女性常用名
	 string ME1f[165] = { "秀", "娟", "英", "华", "慧", "巧", "美", "娜", "静", "淑", "惠", "珠", "翠", "雅", "芝", "玉", "萍", "红", "娥", "玲", "芬", "芳", "燕", "彩", "春", "菊", "兰", "凤", "洁", "梅", "琳", "素", "云", "莲", "真", "环", "雪", "荣", "爱", "妹", "霞", "香", "月", "莺", "媛", "艳", "瑞", "凡", "佳", "嘉", "琼", "勤", "珍", "贞", "莉", "桂", "娣", "叶", "璧", "璐", "娅", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "姣", "婉", "娴", "瑾", "颖", "露", "瑶", "怡", "婵", "雁", "蓓", "纨", "仪", "荷", "丹", "蓉", "眉", "君", "琴", "蕊", "薇", "菁", "梦", "岚", "苑", "筠", "柔", "竹", "霭", "凝", "晓", "欢", "霄", "枫", "芸", "菲", "寒", "欣", "滢", "伊", "亚", "宜", "可", "姬", "舒", "影", "荔", "枝", "思", "丽", "秀", "飘", "育", "馥", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "宁","蓓", "纨", "苑", "婕", "馨", "瑗", "琰", "韵", "融", "园", "艺", "咏", "卿", "聪", "澜", "纯", "毓", "悦", "昭", "冰", "爽", "琬", "茗", "羽", "希" };
	 //院系
	 string Major[10] = {"软件工程","动画设计","网络工程","电子通讯","网络安全","电气工程","机电一体化","物联网工程","数字媒体","电信工程"};
	 for(int i=0;i<1001;i++){
		 student[i].id=i;
	 student[i].sex = (rand()%2 == 0?"男":"女");//男女选择
	 student[i].name = (rand()%56 != 5?NA1[rand()%444]:NA2[rand()%59]);//单姓Or复姓选择
	 student[i].name += (student[i].sex == "男" ? ME1m[rand()%140] : ME1f[rand()%165]);//取名第一字
	 if(rand()%2 == 0) student[i].name += (student[i].sex == "男" ? ME1m[rand()%140] : ME1f[rand()%165]);//取名第二字
	 student[i].age=rand()%30;
	 student[i].part = Major[rand()%10];//选择院系
	 }
}
